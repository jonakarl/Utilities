#!/bin/bash
set -e

# Default variables
VETH_IPRANGE=172.18
EXCLUDED_IF="Br|lo|metadata|wwan|ifb"
OPINTERFACES="nlw_|wwan"
DNS_TEST_URL="www.monroe-system.eu"
UPDATE_INTERFACES_MNS=30
URL_NOOP="monroe/base:complete"
#Update above default variables, 
. /etc/default/monroe-experiments

#Internal varilables
_LOCKFILE_="/var/run/$(basename $0).lock"
_MNS_="ip netns exec monroe"
_INVOKED_FROM _SYSTEMD_="$INVOCATION_ID"

export PATH=/usr/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if $(systemctl -q is-active monroe-namespace.service) && [ -z "${_INVOKED_FROM _SYSTEMD_}" ]; then
  echo "The do not run this script manually when started as a systemd service"
  echo "systemctl stop monroe-namespace.service to stop the service"
  exit 1
fi

# Only run one instance 
exec {FD}>${_LOCKFILE_} || exit 1
flock -n {FD} || { 
  echo "ERROR: flock() failed, already running? If not delete ${_LOCKFILE_}" >&2
  exit 1
 }

function ifnum {
  # generate a unique static IP for each interface name metadata is .0.1
  # $1 - interface name (e.g wwan0)
  echo -n "$VETH_IPRANGE."
  echo $1 | sed -e 's/\([^0-9]\+\)\([0-9]\+\)/\2-\1/g' \
    -e 's/-nlw_/1/g' \
    -e 's/-ppp/2/g' \
    -e 's/-eth/3/g' \
    -e 's/-usb/4/g' \
    -e 's/-wlan/5/g' \
    -e 's/-wwan/6/g' \
    -e 's/^0*//g'
}

function iftable {
  # return the routing table that holds routing data for a given interface
  # $1 - interface name (e.g wwan0)
  ip route show dev $1 table all |grep default | awk '{for (i=1;i<=NF;i++){if($i=="table"){print $(i+1)}}}'
}

function update_dnsmasq_conf {
  # create regex to replace interface names
  # no parameters, copies and replaces a file in /tmp
  TRANSLATE=""
  for i in $(ls /sys/class/net/|egrep -v $EXCLUDED_IF); do
    if [ ! -z "$(echo $i|egrep $OPINTERFACES)" ]; then 
      OPIF=$(usb2op $i)
    else
      OPIF=$i
    fi
    IPAD=$(ifnum $i).2
    TRANSLATE="$TRANSLATE -e s/[0-9.]\+@$i/$IPAD@$OPIF/g"
  done

  mv /tmp/dnsmasq-servers-netns-monroe.conf /tmp/dnsmasq-servers-netns-monroe.bak || true
  cat /etc/dnsmasq.d/dnsmasq-custom.conf | grep -v servers-file | grep -v "=8.8" > /tmp/dnsmasq-servers-netns-monroe.conf
  sed $TRANSLATE /tmp/dnsmasq-servers.conf >> /tmp/dnsmasq-servers-netns-monroe.conf

  # return non-empty if the files differ, or the bak file does not exist
  diff /tmp/dnsmasq-servers-netns-monroe.conf /tmp/dnsmasq-servers-netns-monroe.bak 2>&1 || true
}

##############################################################################

# Init namespace

# ensure base image is pulled
echo -n "Ensure base images are up-to-date: "
docker images --format "{{.Repository}}:{{.Tag}}" | grep $URL_NOOP || pull-base-containers || true

# TODO: Replace the following with docker network create --driver bridge monroe?
# GET : ContainerID of running Namespace container if exists)
CID=$(docker ps --no-trunc -qf name=monroe-namespace)

MNR_NAMESPACE_PATH=/var/run/netns/monroe
echo -n "Starting Monroe Namespace: "
if [ ! -e $MNR_NAMESPACE_PATH ] || [ -z "$CID" ]; then
  # Make sure that all monroe containers are stopped
  echo ''
  for CONTAINER in $(docker ps -q); do
    IMAGENAME=$(docker inspect --format '{{.Config.Image}}' $CONTAINER)
    if [[ "$IMAGENAME" == "monroe-"* ]] || [[ "$IMAGENAME" == "base-"* ]] ; then
        echo -ne "\t* Stopping monroe container: "
	docker stop -t 0 $CONTAINER 2>/dev/null || true
    fi
  done
  # Remove the monroe-namespace container 
  echo -ne "\t* Removing monroe container: "
  docker rm -f monroe-namespace 2>/dev/null || true 

  echo -ne "\t* Starting Monroe Namespace: "
  docker run -d --net=none --name monroe-namespace base-$URL_NOOP /bin/sh /opt/monroe/noop.sh || true
  CID=$(docker ps --no-trunc -qf name=monroe-namespace)
  if [ -z "$CID" ]; then
     logger -t monroe-namespace "Network namespace Could not start."
     echo "Network namespace Could not start."
     exit 1
  fi
  PID=$(docker inspect -f '{{.State.Pid}}' $CID)
  mkdir -p $(dirname $MNR_NAMESPACE_PATH)
  ln -sFf /proc/$PID/ns/net $MNR_NAMESPACE_PATH
  
  echo -ne "\t* Adding metadata interface ($VETH_IPRANGE.0.1/24 -> $VETH_IPRANGE.0.2/24): "
  ip link del montmp 2>/dev/null || true
  ip link del metadata 2>/dev/null || true
  ip link add metadata type veth peer name montmp
  ip link set montmp netns monroe
  ip addr add $VETH_IPRANGE.0.1/24 dev metadata
  ip link set metadata up
  ${_MNS_} ip link set montmp name metadata
  ${_MNS_} ip addr add $VETH_IPRANGE.0.2/24 dev metadata
  ${_MNS_} ip link set metadata up
  # Make the metadata IP be resolvable MNS and Host share /etc/hosts
  sed -i '/metadata/d' /etc/hosts
  echo -e "$VETH_IPRANGE.0.1\tmetadata" >> /etc/hosts
  echo " done."

  logger -t monroe-namespace "Started noop container and monroe netns."
else 
  echo " -> done"
fi

# Init Namespace Done

# Loop while namesapce is up 
while [ -e $MNR_NAMESPACE_PATH ] || [ ! -z "$CID" ]; do

  DNS_CHANGED=$(update_dnsmasq_conf)
  LOOKUP_FAIL=$(${_MNS_} nslookup -timeout=1 $DNS_TEST_URL 2>&1 >/dev/null ; echo $?) 

  if [ -z "$(pgrep -f dnsmasq-monroe)" ]; then
    logger -t monroe-namespace "dnsmasq is not started, restarting."
    ${_MNS_} /usr/sbin/dnsmasq -C /tmp/dnsmasq-servers-netns-monroe.conf -x /run/dnsmasq/dnsmasq-monroe.pid -u dnsmasq
  elif [ $LOOKUP_FAIL ] || [ ! -z "$DNS_CHANGED" ]; then
    kill -9 $(cat /run/dnsmasq/dnsmasq-monroe.pid) || true
    ${_MNS_} /usr/sbin/dnsmasq -C /tmp/dnsmasq-servers-netns-monroe.conf -x /run/dnsmasq/dnsmasq-monroe.pid -u dnsmasq
  fi

  INTERFACES_TO_BRIDGE="$(ls /sys/class/net/|egrep -v $EXCLUDED_IF)" || true
  CURRENT_BRIDGES="$(ls /sys/class/net/|grep Br)" || true
  IFB_INTERFACES="$(ls /sys/class/net/|grep ifb)" || true

  # Clean up OLD Bridges (auto cleans {_MNS_})
  echo -n "Cleaning up old bridge interfaces: "
  for BRIF in $CURRENT_BRIDGES; do
    IF=${BRIF::-2}  # Remove Br to get to the InterfaceName 
    if [[ $INTERFACES_TO_BRIDGE != *$IF* ]]; then
      echo -n "."
      ip link del $BRIF 2>/dev/null || true
      rm -f /etc/circle.d/50-$IF-nat.rules
    fi
  done
  echo " done"

  if [ ! -z "$IFB_INTERFACES" ];then 
    echo -n "Create IFB Interface (if not already there): "
    for IF in $INTERFACES_IFB; do
      echo -n " $IF,"
      ip l set $IF netns monroe 2>/dev/null || true
    done
    echo " done"
  fi

  echo "Creating/Updating Interface bridges: "
  for IF in $INTERFACES_TO_BRIDGE; do
    if [ ! -z "$(echo $IF|egrep $OPINTERFACES)" ]; then 
        OP=$(usb2op $IF)
    else
        OP=$IF
    fi
    if [ ! -z "$(ip link|grep 'state DOWN'|grep ${IF}:)" ]; then
      if [ ! -z "$(${_MNS_} ip link|grep ${OP}@)" ]; then
        echo -e "\tHost $IF is down -> set Monroe NS $OP down."
        ${_MNS_} ip link set $OP down 2>/dev/null || true
      else
        echo -e "\tHost $IF is down and no Monroe NS $OP -> skip."
      fi
      continue
    fi
    if [ ! -z "$(${_MNS_} ip link|grep ${OP}@)" ]; then   # We assume the host interface is up 
      echo -e "\tHost $IF is up -> set Monroe NS $OP up"
      ${_MNS_} ip link set $OP up
      continue;
    fi
    if [ -z "$(ip link|grep ${IF}Br:)" ]; then
      echo -ne "\tCreate Bridge Host $IF to Monroe $OP: "
      IPRANGE=$(ifnum $IF)
      TABLE=$(iftable $IF)
      if [ -z "$TABLE" ]; then
        echo "No host route for $IF -> skip"
        continue 
      fi
      OUTMASK=$(ip a show dev $IF|grep inet|head -n 1|cut -f6 -d' ')
      OUTRANGE="${OUTMASK%.*}"
      OUTADDR="${OUTMASK%/*}"
      MTU=$(cat /sys/class/net/${IF}/mtu)

      echo -ne "\n\t\t* Create veth pair -> "
      # create veth interface pair
      ip link del montmp 2>/dev/null || true
      ip link del ${IF}Br 2>/dev/null || true
      ip link add ${IF}Br type veth peer name montmp
      ip link set dev ${IF}Br mtu $MTU
      ip link set dev montmp mtu $MTU
      ip link set montmp netns monroe
      ip addr add ${IPRANGE}.1/24 dev ${IF}Br
      ip link set ${IF}Br up
      ${_MNS_} ip link set montmp name $OP
      ${_MNS_} ip addr add ${IPRANGE}.2/24 dev $OP
      ${_MNS_} ip link set $OP up
      echo "done"

      echo -ne "\t\t* Create NAT rules -> "
      # Firewall masquerade internal IFBr to IF
      TARGET="/etc/circle.d/50-$IF-nat.rules"
      RULES="\
\${ipt4} -t nat -A POSTROUTING -s ${IPRANGE}.2/24 -o ${IF} -j MASQUERADE
\${ipt4} -I FORWARD 1 -i ${IF} -o ${IF}Br -j ACCEPT
\${ipt4} -I FORWARD 1 -i ${IF}Br -o ${IF} -j ACCEPT"
      echo "$RULES" > $TARGET
      echo "done"

      echo -ne "\t\t* Create routing tables in Monroe NS for $OP (${IPRANGE}.2 via ${IPRANGE}.1) -> "
      # Routing OP to gateway in netns monroe
      ${_MNS_} ip ro flush table $TABLE || true
      ${_MNS_} ip ro add default via ${IPRANGE}.1 table $TABLE
      # Delete old tables if any in Monroe NS
      ${_MNS_} ip ru del from ${IPRANGE}.2 lookup $TABLE priority 10000 2>/dev/null || true
      ${_MNS_} ip ru del from all to ${IPRANGE}.2/24 lookup $TABLE priority 20000 2>/dev/null || true
      ${_MNS_} ip ru del from all iif lo lookup $TABLE priority 91000 2>/dev/null || true
      #Create new Tables
      ${_MNS_} ip ru add from ${IPRANGE}.2 lookup $TABLE priority 10000
      ${_MNS_} ip ru add from all to ${IPRANGE}.2/24 lookup $TABLE priority 20000 
      ${_MNS_} ip ru add from all iif lo lookup $TABLE priority 91000 
      echo "done"

      echo -ne "\t\t* Create routing tables in Host for $IF (${IPRANGE}.1) -> "
      # Routing IFBr to IF in host (using table allocator tables)
      ip rule delete from $IPRANGE.1/24 2>/dev/null || true
      ip rule add from $IPRANGE.1/24 table $TABLE priority 10000
      echo "done"
    fi
  done
  circle start
  if [ ! -z "${_INVOKED_FROM _SYSTEMD_}" ];then  # IF we are called form systemd we should loop 
    sleep ${UPDATE_INTERFACES_MNS}
    CID=$(docker ps --no-trunc -qf name=monroe-namespace)
  else
    break
  fi
done

flock -u {FD}